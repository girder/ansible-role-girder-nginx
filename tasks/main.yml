---
- name: Install Nginx package
  apt:
    # This is the first apt step, so update the cache
    update_cache: true
    cache_valid_time: 3600  # 1 hour
    name: nginx-light
    force_apt_get: true
  notify:
    - Restart Nginx
  become: true
  become_user: root

- name: Remove Nginx default site config file
  file:
    state: absent
    path: "/etc/nginx/sites-enabled/default"
  notify:
    - Restart Nginx
  become: true
  become_user: root

# This must run before Certbot is used, to provide an HTTP-only config
- name: Deploy Nginx base config file
  template:
    src: base.conf.j2
    dest: "/etc/nginx/conf.d/base.conf"
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart Nginx
  become: true
  become_user: root

- when: ansible_facts['distribution_version'] is version('20.04', '<')
  block:
    - name: Add Certbot PPA key
      apt_key:
        id: "{{ nginx_certbot_ubuntu_apt_key }}"
        # https://unix.stackexchange.com/a/110594
        keyserver: "hkps://keyserver.ubuntu.com:443"
      become: true
      become_user: root

    - name: Add Certbot PPA
      apt_repository:
        repo: >-
          deb
          http://ppa.launchpad.net/certbot/certbot/ubuntu
          {{ ansible_distribution_release }}
          main
        update_cache: true
      become: true
      become_user: root

    - name: Install Certbot package from PPA
      apt:
        # This is Python 3, but named differently in the PPA
        name: python-certbot-nginx
        force_apt_get: true
      become: true
      become_user: root

- when: ansible_facts['distribution_version'] is version('20.04', '>=')
  block:
    - name: Install Certbot package from Ubuntu packages
      apt:
        name: python3-certbot-nginx
        force_apt_get: true
      become: true
      become_user: root

# Nginx must be already started via systemd, or running Certbot will start its
# own instance, then orphan that Nginx process (still bound to ports) when it
# ends
- name: Ensure Nginx is running
  systemd:
    name: nginx
    state: started
  become: true
  become_user: root

- name: Obtain an SSL certificate from Let's Encrypt
  command: >-
    certbot certonly --nginx
    --email {{ nginx_registration_email }}
    --agree-tos
    --no-eff-email
    --cert-name {{ nginx_hostname }}
    --domains {{ nginx_hostname }}
    --rsa-key-size 4096
    --keep-until-expiring
    --non-interactive
  args:
    creates: "/etc/letsencrypt/live/{{ nginx_hostname }}/privkey.pem"
  notify:
    - Restart Nginx
  become: true
  become_user: root

# The Certbot package inserts a systemd timer entry for renewal
# Certbot's internal attempts to reload Nginx do not use systemd; this
# script ensures that the whole service is reloaded upon renewal success
- name: Add Certbot renewal hook to reload Nginx
  copy:
    content: |
      #!/bin/bash
      sudo systemctl reload nginx
    dest: /etc/letsencrypt/renewal-hooks/deploy/01_reload_nginx.sh
    mode: 0755
  become: true
  become_user: root

- name: Deploy Nginx Girder config file
  template:
    src: girder.conf.j2
    dest: "/etc/nginx/conf.d/girder.conf"
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart Nginx
  become: true
  become_user: root

- name: Enable Nginx service
  systemd:
    name: nginx
    daemon_reload: true
    enabled: true
  become: true
  become_user: root
